<style lang="less">
    .introduction {
        height: 3.3em;
    }

    .error-message {
        color: #E64340;
    }

    .avatar {
        width: 80px;
        height: 80px;
        display: block;
        border-radius: 50%;
    }

    .avatar-wrap {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

<template>
    <div class="page">
        <div class="page__bd">
            <!--头像-->
            <div class="avatar-wrap">
                <image class="avatar" :src="form.avatar" @tap="uploadAvatar"/>
            </div>

            <!-- 填写姓名 -->
            <div class="weui-cells__title" :class="{'weui-cell_warn': errors.name}">姓名</div>
            <div class="weui-cells weui-cells_after-title">
                <div class="weui-cell weui-cell_input" :class="{'weui-cell_warn': errors.name}">
                    <div class="weui-cell__bd">
                        <input class="weui-input" placeholder="请输入姓名" name="name" v-model="form.name"/>
                    </div>
                    <div v-if="errors.name" class="weui-cell__ft">
                        <icon type="warn" size="23" color="#E64340"></icon>
                    </div>
                </div>
            </div>
            <!-- 姓名错误信息 -->
            <div v-if="errors.name" class="weui-cells__tips error-message">{{ errors.name[0] }}</div>

            <!-- 填写邮箱 -->
            <div class="weui-cells__title" :class="{'weui-cell_warn': errors.email}">邮箱</div>
            <div class="weui-cells weui-cells_after-title">
                <div class="weui-cell weui-cell_input" :class="{'weui-cell_warn': errors.email}">
                    <div class="weui-cell__bd">
                        <input class="weui-input" placeholder="请输入邮箱" name="email" v-model="form.email"/>
                    </div>
                    <div v-if="errors.email" class="weui-cell__ft">
                        <icon type="warn" size="23" color="#E64340"></icon>
                    </div>
                </div>
            </div>
            <!-- 邮箱错误信息 -->
            <div v-if="errors.email" class="weui-cells__tips error-message">{{ errors.email[0] }}</div>

            <!-- 填写简介 -->
            <div class="weui-cells__title" :class="{'weui-cell_warn': errors.introduction}">个人简介</div>
            <div class="weui-cells weui-cells_after-title" :class="{'weui-cell_warn': errors.introduction}">
                <div class="weui-cell">
                    <div class="weui-cell__bd">
                        <textarea class="weui-textarea introduction" placeholder="请输入简介" name="introduction" v-model="form.introduction"/>
                    </div>
                    <div v-if="errors.introduction" class="weui-cell__ft">
                        <icon type="warn" size="23" color="#E64340"></icon>
                    </div>
                </div>
            </div>
            <!-- 简介错误信息 -->
            <div v-if="errors.introduction" class="weui-cells__tips error-message">{{ errors.introduction[0] }}</div>

            <!-- 提交表单 -->
            <div class="weui-btn-area">
                <button class="weui-btn" type="primary" @tap="submit">修改</button>
            </div>
        </div>
    </div>
</template>

<script>
    import wepy from '@wepy/core'
    import store from '@/store/index'
    import {mapGetters} from '@wepy/x'
    import WeValidator from 'we-validator'
    import _ from 'lodash'
    import userApi from '@/api/user'

    wepy.page({
        store,
        data: {
            errors: {},
            form: {},
        },
        computed: {
            ...mapGetters([
                'user'
            ])
        },
        onReady() {
            this.initValidator()
        },
        onShow() {
            this.form = _.pick(this.user, ['name', 'email', 'introduction', 'avatar']);
        },
        methods: {
            initValidator() {
                this.validator = new WeValidator({
                    multiCheck: true,
                    rules: {
                        name: {
                            required: true,
                        },
                        email: {
                            required: true,
                            email: true,
                        },
                        introduction: {
                            maxlength: 80
                        }
                    },
                    messages: {
                        name: {
                            required: "请输入名字",
                        },
                        email: {
                            email: "邮箱格式不正确",
                        },
                        introduction: {
                            maxlength: "长度限制 80"
                        }
                    },
                    onMessage: (data) => {
                        let errors = {}
                        _.map(data, (value, key) => {
                            errors[key] = [value.msg]
                        })
                        this.errors = errors
                    }
                })
            },
            async uploadAvatar() {
                try {
                    // 选择头像图片
                    let image = await wepy.wx.chooseImage({count: 1})
                    // 获取选择图片本地地址
                    let avatar = image.tempFilePaths[0]

                    let uploadRawResp = await userApi.uploadAvatar(avatar)
                    console.log("uploadRawResp", uploadRawResp)
                    // 小程序上传结果没有做 JSON.parse，需要手动处理
                    let uploadResp = JSON.parse(uploadRawResp.data)
                    console.log("uploadResp", uploadResp)

                    this.form = _.assign(this.form, {
                        avatar: uploadResp.path,
                        avatar_image_id: uploadResp.id
                    })
                } catch (e) {
                    console.log(e)
                }
            },
            async submit() {
                // 表单验证
                if (!this.validator.checkData(this.form)) {
                    return
                }

                // 发送请求
                let updateResp
                try {
                    console.log("updateUser", this.form)
                    updateResp = await this.$store.dispatch('updateUser', this.form)
                } catch (e) {
                    if (e.response.statusCode === 422) {
                        this.errors = e.response.data.errors
                    } else if (!e.handled) {
                        wx.showToast({
                            title: e.response.data.message,
                            icon: "none"
                        })
                    }
                    console.log(e)
                    return
                }

                wx.showToast({
                    title: "修改成功",
                    icon: "success",
                    duration: 2000
                })
            },
        }
    })

</script>
<config>
    {
        navigationBarTitleText: '修改资料'
    }
</config>